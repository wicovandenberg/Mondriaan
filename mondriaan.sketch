let version = "0.5";
let canvasWidth = 750;
let canvasHeight = 750;
let planes = [];
let lines = [];
let lineThickness = 0;
let pal = [];

function setup() {
  
  //palette = {"red":color('rgba(239, 25, 17, 255)'), "yellow": color('rgba(239, 25, 17, 255)'), "blue":color('rgba(239, 25, 17, 255)'), "black": color('rgba(20, 20, 20, 255)')};

  let canvas = createCanvas(canvasWidth, canvasHeight);
  //if on website
  if (window.jQuery) { 
    if (windowWidth < 769) {
      canvasWidth = windowWidth-50;
      canvasHeight = windowWidth-50;
    } else {
      canvasWidth = 550;
      canvasHeight = 550;
    }
    resizeCanvas(canvasWidth, canvasHeight);
    canvas.parent('p5js');
    console.log('version: ' + version);
  }
  lineThickness = Math.round(canvasWidth * 0.025);
  
  p5init();
}
function p5init() {
  pal = [color('rgba(239, 25, 17, 255)'), color('rgba(243, 225, 29, 255)'), color('rgba(7, 40, 85, 255)'), color('rgba(20, 20, 20, 255)')];

  background(255);
  noStroke();
  //strokeWeight(10);
  planes = [0];
  lines = [];
  divideRectangles();
  colorPlanes();
  drawPlanes();
  drawLines();
}

function draw() {
  
}
function divideRectangles() {
  /*
  algorithm:
  - There is a small chance on doing a cross section (split in 4 at once), maybe 10%
  and else it's a single split in 2.
  - TODO: A split will skipped if the remaining space (width or height) is smaller than the calculated variable line thickness so that a plane will have a minimal width or height equal to the line thickness. 
  - All planes are drawn and then placed in an array.
  - Drawing the lines. After all panes are created the lines are drawn on top of the intersects by looping through the planes array. The line thickness is calculated based on the canvas size (2.5%).
  - TODO: Line ending before edge of canvas. In very rare occasions Mondriaan does not paint the line all the way to the edge of the canvas and leaves a small gap showing the intersecting planes touching. The intersection of the planes in that case is on the side of the line (in other words the line is on either one of the planes) and one of the planes is enlarged with half the line thickness. Enlarging the primary colored plane is much more common than enlarging a white plane.
  - For the colors there is always at least 1 red, 1 yellow, 1 blue and 1 black. There is a small chance an adjacent pane also gets the color of it's neighbour, this can happen only once. The rest of the panes will be white. Colors are randomly given to panes after they are created. Mondriaan uses the larger panes to color, especially the biggest pane is mostly red, but I want this to leave this by chance for now and see what comes out. Mondriaan also uses color mostly on the planes at the sides of the canvas. For now I want to see what comes out if I don't copy this.
  */
  
  
  //first rectangle is full canvas
  fill(70);
  planes[0] = new Plane(0,0,canvasWidth,canvasHeight); 
  //planes[0] = new Plane(25,25,600,600); 
  
  
  let selPlane = planes[0];
  //flip a coin for horizontal or vertical split
  if ((random() < 0.5) == true) {
    splitOrientation = "horizontal";
  } else {
    splitOrientation = "vertical";
  }
  y = selPlane.y;
  height = selPlane.height;
  splitPosY = Math.round(random(y+10,y + height-10));
  //splitPosY = 623;
  console.log('splitPosY: '+splitPosY);
  x = selPlane.x;
  width = selPlane.width;
  splitPosX = Math.round(random(x+10,x + width-10));
  //splitPosX = 623;
  console.log('splitPosX: '+splitPosX);
  console.log('1: ' + JSON.stringify(planes));
  splitPane(selPlane,"both",splitPosX,splitPosY);
  console.log('2: ' + JSON.stringify(planes));
  planes.splice(0,1);
  console.log('3: ' + JSON.stringify(planes));
  
  
  for (let i = 0; i < 4; i++) {
    p = planes[0];
    y = p.y;
    height = p.height;
    splitPosY = Math.round(random(y+10,y + height-10));
    //splitPosY = 35;
    console.log('splitPosY: '+splitPosY);
    x = p.x;
    width = p.width;
    splitPosX = Math.round(random(x+10,x + width-10));
    //splitPosX = 35;
    console.log('splitPosX: '+splitPosX);

     if ((random() < 0.5) == true) {
      splitOrientation = "horizontal";
    } else {
      splitOrientation = "vertical";
    }
    
    splitPane(p,splitOrientation,splitPosX,splitPosY);
    console.log('4-' + i + ': ' + JSON.stringify(planes));
    planes.splice(0,1);
  }
  console.log('5:' + JSON.stringify(planes));
  
}
function splitPane(plane, splitOrientation, splitPosX,splitPosY) {
  console.log('orientation: ' + splitOrientation);
  if (splitOrientation === "horizontal") {
    p1 = new Plane(plane.x,plane.y,plane.width,splitPosY-plane.y);
    p2 = new Plane(plane.x,splitPosY,plane.width,plane.height - splitPosY + plane.y);
    planes.push(p1);
    planes.push(p2);
    l1 = new Line(plane.x,splitPosY-(lineThickness/2),plane.width,lineThickness);
    lines.push(l1);
  } else if (splitOrientation === "vertical") {
    console.log('split from: ' + JSON.stringify(plane));
    p1 = new Plane(plane.x,plane.y,splitPosX-plane.x,plane.height);
    p2 = new Plane(splitPosX,plane.y,plane.width-splitPosX+plane.x,plane.height);
    planes.push(p1);
    planes.push(p2);
    l1 = new Line(splitPosX-(lineThickness/2),plane.y,lineThickness,plane.height);
    lines.push(l1);
  } else {
    p1 = new Plane(plane.x,plane.y,splitPosX-plane.x,splitPosY-plane.y);
    p2 = new Plane(splitPosX,plane.y,plane.x+plane.width-splitPosX,splitPosY-plane.y);
    p3 = new Plane(plane.x,splitPosY,splitPosX-plane.x,plane.height-splitPosY+plane.y);
    p4 = new Plane(splitPosX,splitPosY,plane.x+plane.width-splitPosX,plane.height-splitPosY+plane.y);
    planes.push(p1);
    planes.push(p2);
    planes.push(p3);
    planes.push(p4);
    l1 = new Line(plane.x,splitPosY-(lineThickness/2),plane.width,lineThickness);
    l2 = new Line(splitPosX-(lineThickness/2),plane.y,lineThickness,plane.height);
    lines.push(l1);
    lines.push(l2);
  }
  
}
function colorPlanes() {
  nrp = planes.length;
  console.log("nrp: " + nrp);
  index = Math.round(random(0,nrp-1));
  copyPal = pal;
  
  for (let i = 0; i < nrp; i++) {
    console.log("index: " + index);
    sp = planes[index];
    
    nrc = copyPal.length;
    console.log("nrc: " + nrc);
    if (nrc > 0) {
      indexC = Math.round(random(0,nrc-1));
      console.log("indexC: " + indexC);
      sp.setColor(copyPal[indexC]);
      copyPal.splice(indexC,1);
    } else {
      sp.setColor(color('255','255','255','255'));
    }
    if (index === (nrp-1)) {
      index = 0;
    } else {
      index++;
    }
  }
}
function Plane(x,y,width,height) {  
  this.x=x;  
  this.y=y;  
  this.width=width;  
  this.height=height; 
  this.setColor=setColor;  
  function setColor(c) {  
    this.c=c;  
  }
  this.draw=draw;  
  function draw() { 
    fill(this.c);
    rect(x,y,width,height); 
  }
}
function Line(x,y,width,height) {  
  this.x=x;  
  this.y=y;  
  this.width=width;  
  this.height=height;
  this.draw=draw;  
  function draw() { 
    fill(20);
    rect(x,y,width,height);  
  }
}
function drawPlanes() {
  for (let i = 0; i < planes.length; i++) {
    sp = planes[i];
    sp.draw();
  }
}
function drawLines() {
  for (let i = 0; i < lines.length; i++) {
    sl = lines[i];
    sl.draw();
  }
}
