let canvasWidth = 750;
let canvasHeight = 750;
let planes = [];
let lines = [];
let fills = [];

function setup() {
  
  let canvas = createCanvas(canvasWidth, canvasHeight);
  
  //if on website
  if (window.jQuery) { 
    canvasWidth = 400;
    canvasHeight = 400;
    resizeCanvas(canvasWidth, canvasHeight);
    canvas.parent('p5js');
  }
  
  p5init();
}
function p5init() {
  background(255);
  noStroke();
  divideRectangles();
}

function draw() {
  
}
function divideRectangles() {
  /*
  algorithm
  There is a small change on doing a cross section (split in 4 at once), maybe 10%
  and else it's a single split in 2.
  */
  
  //first rectangle is full canvas
  fill(70);
  planes[0] = new Plane(0,0,canvasWidth,canvasHeight); 
  
  let selPlane = planes[0];
  //flip a coin for horizontal or vertical split
  if ((random() < 0.5) == true) {
    //horizontal (between y pos and y+height)
    orientation = "horizontal";
    
    /*p1 = new Plane(selPlane.x,selPlane.y + splitPos,selPlane.width,selPlane.height-splitPos);
    p2 = new Plane(selPlane.y,selPlane.x,selPlane.width,selPlane.y + splitPos);
    planes.push(p1);
    planes.push(p2);*/
  } else {
    //vertical (between x pos and x+width)
    orientation = "vertical";
    
    
    /*p1 = new Plane(selPlane.x + splitPos,selPlane.y,selPlane.width-splitPos,selPlane.height);
    p2 = new Plane(selPlane.x,selPlane.y,selPlane.x + splitPos,selPlane.height);
    planes.push(p1);
    planes.push(p2);*/
    //do a horizontal full split
    /*y = selPlane.y;
    width = selPlane.width;
    splitPos = Math.round(random(y,width));*/
  }
  y = selPlane.y;
  height = selPlane.height;
  splitPosY = Math.round(random(y,y + height));
  
  x = selPlane.x;
  width = selPlane.width;
  splitPosX = Math.round(random(x,x + width));
  
  
  splitPane(selPlane,"both",splitPosX,splitPosY);
  planes.splice(0,1);
  console.log(planes);
  
}
function splitPane(plane, orientation, splitPosX,splitPosY) {
  if (orientation === "horizontal") {
    p1 = new Plane(plane.x,plane.y + splitPosY,plane.width,plane.height - splitPosY);
    p2 = new Plane(plane.y,plane.x,plane.width,plane.y + splitPosY);
    planes.push(p1);
    planes.push(p2);
  } else if (orientation === "vertical") {
    p1 = new Plane(plane.x + splitPosX,plane.y,plane.width-splitPosX,plane.height);
    p2 = new Plane(plane.x,plane.y,plane.x + splitPosX,plane.height);
    planes.push(p1);
    planes.push(p2);
  } else {
    p1 = new Plane(plane.x,plane.y,plane.width-splitPosX,plane.height-splitPosY);
    p2 = new Plane(plane.x+splitPosX,plane.y,plane.width-splitPosX,plane.height-splitPosY);
    p3 = new Plane(plane.x,plane.y+splitPosY,plane.width-splitPosX,plane.height-splitPosY);
    p4 = new Plane(plane.x+splitPosX,plane.y+splitPosY,plane.width-splitPosX,plane.height-splitPosY);
    planes.push(p1);
    planes.push(p2);
    planes.push(p3);
    planes.push(p4);
  }
  
}
function Plane(x,y,width,height) {  
  this.x=x;  
  this.y=y;  
  this.width=width;  
  this.height=height; 
  fill(random(255),random(255),random(255));
  rect(x,y,width,height);
  this.setColor=setColor;  
  function setColor(color) {  
    this.color=color;  
  }
}  